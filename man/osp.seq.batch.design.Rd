% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ospSeqBatchDesign.R
\name{osp.seq.batch.design}
\alias{osp.seq.batch.design}
\title{Adaptive Batching designs for optimal stopping}
\usage{
osp.seq.batch.design(model, method = "km", t0 = 0.01, is.gbm = FALSE)
}
\arguments{
\item{model}{a list containing all the model parameters.}

\item{method}{either \code{km} or \code{hetgp} to select the GP emulator to apply}

\item{t0}{parameter \code{t0} for \code{ABSUR} heuristic [Default value is 0.01]}

\item{is.gbm}{flag to indicate whether the underlying simulator is independent log-normals (used 
as part of density computation for integrated EI criteria) [Default FALSE]}
}
\value{
a list containing:
\itemize{
\item \code{fit} a list of fitted response surfaces
\item \code{timeElapsed} vector of time costs for each round
\item \code{nsims} total number of 1-step \code{model$sim.func} calls
\item \code{empLoss} vector of empirical losses
\item \code{ndesigns}: number of unique designs k_T
\item \code{batches}: matrix of replications r_i, indexed by time-steps and by sequential rounds
}
}
\description{
Sequential experimental design for optimal stopping problems with several 
adaptive batching heuristics based on Lyu & Ludkovski (2020+)
}
\details{
Implements the adaptive batching strategy defined in \code{mode$batch.heuristic}. 
Calls \code{lhs}  from library \pkg{tgp}. Possible batch heuristics are:
\itemize{
  \item \code{fb}: [Default] fixed batch amounts (essentially same as \link{osp.seq.design})
  \item \code{mlb}: Multi-level batching
  \item \code{rb}: Ratchet batching which relies on \code{model$r.cand}
  \item \code{adsa}: Adaptive Design with Sequential Allocation
  \item \code{ddsa}: Deterministic ADSA that alternates between adding a new input site and allocating
  to existing sites
}

All heuristics also require specifying the acquisition function for expected improvement criterion 
via \code{model$ei.func}, see \link{osp.seq.design}
}
\examples{
sob30 <- randtoolbox::sobol(55, d=2)  # construct a space-filling initial design
sob30 <- sob30[ which( sob30[,1] + sob30[,2] <= 1) ,]  
sob30 <- 25+30*sob30 
model2d <- list(x0 = rep(40,2),K=40,sigma=rep(0.2,2),r=0.06,
 div=0,T=1,dt=0.04,dim=2,sim.func=sim.gbm, 
 payoff.func=put.payoff, look.ahead=1, pilot.nsims=1000,
 cand.len=1000,max.lengthscale=c(40,40),min.lengthscale=c(3,3),
 seq.design.size=50,batch.nrep=25,total.budget=1000,init.size=30,
 init.grid=sob30, kernel.family="gauss",update.freq=5,
 r.cand=c(20, 30,40,50,60, 80, 120, 160))
set.seed(11)
require(tgp)
require(DiceKriging)
require(laGP)
require(ks)
model2d$batch.heuristic <- 'adsa'
model2d$ei.func <- 'amcu'
oos.obj.adsa <- osp.seq.batch.design(model2d,method="trainkm")
# not run: plt.2d.surf.with.batch(oos.obj.adsa$fit[[10]],25)
}
\references{
M. Ludkovski, X. Lyu (2020+) Adaptive Batching for Gaussian Process Surrogates with Application 
in Noisy Level Set Estimation, <http://arxiv.org/abs/2003.08579>
}
\seealso{
[mlOSP::osp.seq.design]
}
