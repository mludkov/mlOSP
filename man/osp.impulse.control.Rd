% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ospProbDesign.R
\name{osp.impulse.control}
\alias{osp.impulse.control}
\title{LS-flavor RMC algorithm with a variety of regression methods for stochastic impulse control}
\usage{
osp.impulse.control(
  model,
  input.domain = NULL,
  method = "spline",
  verb = 101,
  mpc = FALSE
)
}
\arguments{
\item{model}{a list defining the simulator and reward model, with the two main model hooks being 
\code{impulse.func} (plus parameters) and \code{sim.func} (plus parameters).}

\item{method}{a string specifying regression method to use
\itemize{
 \item spline [Default]: \code{smooth.spline} from \pkg{base} which only works \emph{in 1D}
 \item randomforest: (from \pkg{randomForest} package) requires \code{rf.maxnode}
 and \code{rf.ntree} (number of trees) model parameters
 \item loess: only works in \emph{1D or 2D}, requires \code{lo.span} model parameter
 \item deepnet: neural network using \pkg{deepnet}. Specify \code{nn.layers} as a vector 
 to describe the number of nodes across hidden layers
 \item homgp Homoskedastic GP: use \pkg{hetGP} with  \code{mleHomGP}
\item hetgp Heteroskedastic GP: use \pkg{hetGP} with \code{mleHetGP}
 \item lm: linear global regression using \code{model$bases} (required) basis functions (+ constant)
 }}
}
\value{
a list containing
\itemize{
\item \code{fit} a list containing all the models generated at each time-step. \code{fit[[1]]} is the emulator
at \eqn{t=\Delta t}, the last one is \code{fit[[M-1]]} which is emulator for \eqn{T-\Delta t}.
\item \code{timeElapsed} (based on \code{Sys.time})
}
}
\description{
RMC for impulse control.
Training design specified explicitly by the user
}
\details{
Works with a design specified by the user
 
 Calls \code{model$impulse.func}, so the latter must be set prior to calling.
 Also needs \code{model$dt} and \code{model$r} for discounting. 
 
 Calls \code{model$sim.func} to generate forward paths. Use in conjunction with
 \code{\link{forward.impulse.policy}}
}
\examples{
set.seed(1)
require(DiceKriging)
modelBelak <- list(dim=1, sim.func=sim.bm, r=0.5, drift=0, sigma=1, 
x0=1,  impulse.fixed.cost = 1,impulse.target = 0,impulse.func = forest.impulse,
imp.type = "forest",T=5, dt=0.05,pilot.nsims=0,batch.nrep = 10,nk = 30,N = 601)
belSolve <- osp.impulse.control(modelBelak, input.domain = seq(-0.5,2.5,by=0.005),method="spline")
}
\author{
Mike Ludkovski
}
